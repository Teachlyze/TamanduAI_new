/**
 * üîî EDGE FUNCTION WRAPPER - NOTIFICATIONS
 * 
 * Wrapper para Edge Functions de notifica√ß√µes:
 * - Processamento em lote
 * - Notifica√ß√µes em tempo real
 * - Envio de emails
 */

import { supabase } from '@/lib/supabaseClient';

/**
 * Processa notifica√ß√µes em lote
 * @param {Array<Object>} notifications - Array de notifica√ß√µes
 * @returns {Promise<Object>} Resultado do processamento
 */
export const processNotificationsBatch = async (notifications) => {
  try {
    const { data, error } = await supabase.functions.invoke('process-notifications', {
      body: { notifications }
    });

    if (error) {
      console.error('Erro na Edge Function process-notifications:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Erro ao processar notifica√ß√µes em lote:', error);
    throw error;
  }
};

/**
 * Cria e envia uma notifica√ß√£o
 * @param {string} userId - ID do usu√°rio
 * @param {Object} notification - Dados da notifica√ß√£o
 * @returns {Promise<Object>} Notifica√ß√£o criada
 */
export const createAndSendNotification = async (userId, notification) => {
  try {
    const { data, error } = await supabase
      .from('notifications')
      .insert({
        user_id: userId,
        type: notification.type,
        title: notification.title,
        message: notification.message,
        data: notification.data || {},
        read: false,
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) {
      console.error('Erro ao criar notifica√ß√£o:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Erro ao criar notifica√ß√£o:', error);
    throw error;
  }
};

/**
 * Envia email usando Edge Function
 * @param {string} to - Email destinat√°rio
 * @param {string} subject - Assunto
 * @param {string} template - Nome do template
 * @param {Object} data - Dados do template
 * @returns {Promise<Object>} Resultado do envio
 */
export const sendEmail = async (to, subject, template, data = {}) => {
  try {
    const { data: result, error } = await supabase.functions.invoke('send-email-v2', {
      body: {
        to,
        subject,
        template,
        data
      }
    });

    if (error) {
      console.error('Erro na Edge Function send-email-v2:', error);
      throw error;
    }

    return result;
  } catch (error) {
    console.error('Erro ao enviar email:', error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o de pl√°gio detectado
 * @param {string} teacherId - ID do professor
 * @param {string} studentName - Nome do aluno
 * @param {string} activityTitle - T√≠tulo da atividade
 * @param {number} plagiarismPercentage - Porcentagem de pl√°gio
 * @returns {Promise<Object>} Notifica√ß√£o criada
 */
export const sendPlagiarismAlert = async (teacherId, studentName, activityTitle, plagiarismPercentage) => {
  try {
    const notification = {
      type: 'plagiarism_alert',
      title: '‚ö†Ô∏è Pl√°gio Detectado',
      message: `Pl√°gio de ${plagiarismPercentage}% detectado na submiss√£o de ${studentName} para "${activityTitle}"`,
      data: {
        studentName,
        activityTitle,
        plagiarismPercentage
      }
    };

    return await createAndSendNotification(teacherId, notification);
  } catch (error) {
    console.error('Erro ao enviar alerta de pl√°gio:', error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o de IA detectada
 * @param {string} teacherId - ID do professor
 * @param {string} studentName - Nome do aluno
 * @param {string} activityTitle - T√≠tulo da atividade
 * @param {number} aiScore - Score de IA
 * @returns {Promise<Object>} Notifica√ß√£o criada
 */
export const sendAIDetectionAlert = async (teacherId, studentName, activityTitle, aiScore) => {
  try {
    const notification = {
      type: 'ai_detection',
      title: 'ü§ñ Conte√∫do Gerado por IA',
      message: `Poss√≠vel uso de IA (${aiScore}%) detectado na submiss√£o de ${studentName} para "${activityTitle}"`,
      data: {
        studentName,
        activityTitle,
        aiScore
      }
    };

    return await createAndSendNotification(teacherId, notification);
  } catch (error) {
    console.error('Erro ao enviar alerta de IA:', error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o de nova submiss√£o
 * @param {string} teacherId - ID do professor
 * @param {string} studentName - Nome do aluno
 * @param {string} activityTitle - T√≠tulo da atividade
 * @returns {Promise<Object>} Notifica√ß√£o criada
 */
export const sendSubmissionNotification = async (teacherId, studentName, activityTitle) => {
  try {
    const notification = {
      type: 'activity_submitted',
      title: 'üìù Nova Submiss√£o',
      message: `${studentName} submeteu a atividade "${activityTitle}"`,
      data: {
        studentName,
        activityTitle
      }
    };

    return await createAndSendNotification(teacherId, notification);
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de submiss√£o:', error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o de nota recebida
 * @param {string} studentId - ID do aluno
 * @param {string} activityTitle - T√≠tulo da atividade
 * @param {number} grade - Nota
 * @returns {Promise<Object>} Notifica√ß√£o criada
 */
export const sendGradeNotification = async (studentId, activityTitle, grade) => {
  try {
    const notification = {
      type: 'grade_received',
      title: '‚úÖ Nota Atribu√≠da',
      message: `Voc√™ recebeu nota ${grade} na atividade "${activityTitle}"`,
      data: {
        activityTitle,
        grade
      }
    };

    return await createAndSendNotification(studentId, notification);
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de nota:', error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o de prazo pr√≥ximo
 * @param {string} studentId - ID do aluno
 * @param {string} activityTitle - T√≠tulo da atividade
 * @param {Date} deadline - Data limite
 * @returns {Promise<Object>} Notifica√ß√£o criada
 */
export const sendDeadlineNotification = async (studentId, activityTitle, deadline) => {
  try {
    const daysUntil = Math.ceil((new Date(deadline) - new Date()) / (1000 * 60 * 60 * 24));
    
    const notification = {
      type: 'deadline_approaching',
      title: '‚è∞ Prazo Pr√≥ximo',
      message: `A atividade "${activityTitle}" vence em ${daysUntil} dia(s)`,
      data: {
        activityTitle,
        deadline,
        daysUntil
      }
    };

    return await createAndSendNotification(studentId, notification);
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de prazo:', error);
    throw error;
  }
};
