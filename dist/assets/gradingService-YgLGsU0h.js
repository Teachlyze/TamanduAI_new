import{s as i,bd as D}from"./main-Cv3DLBs1.js";const c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).slice(1));function N(e,t=0){return(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase()}let U;const T=new Uint8Array(16);function $(){if(!U){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");U=crypto.getRandomValues.bind(crypto)}return U(T)}const M=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),R={randomUUID:M};function j(e,t,r){e=e||{};const a=e.random??e.rng?.()??$();if(a.length<16)throw new Error("Random bytes length must be >= 16");return a[6]=a[6]&15|64,a[8]=a[8]&63|128,N(a)}function G(e,t,r){return R.randomUUID&&!e?R.randomUUID():j(e)}const X=e=>e?e.format==="date"?"date":e.type==="number"?"number":Array.isArray(e.enum)?"select":e.type==="array"&&e.items?.enum?"checkboxes":e.format==="textarea"?"textarea":"string":"string",z=async e=>{try{const{data:t,error:r}=await i.from("submissions").select("id, user_id, activity_id, status, data").eq("id",e).single();if(r)throw r;if(t.status==="graded")throw new Error("This submission has already been graded");const{data:a,error:n}=await i.from("activities").select("id, schema").eq("id",t.activity_id).single();if(n)throw n;let d=[];const o=t?.data;Array.isArray(o)?d=o.map((m,y)=>({id:`${e}-${y}`,question_index:y,value:m?.answer_text??m})):o&&typeof o=="object"&&(d=Object.entries(o).map(([y,k],A)=>({id:`${e}-${y}`,question_index:A,value:k?.answer_text??k})));const u=a?.schema||{},s=u?.properties||{},l=u?.meta||{},b=l?.answer_key||u?.answer_key||{},g=l?.points||{};let w=0,f=0,_=!1;for(const m of d||[]){const y=m.question_index,k=`question_${y}`,A=s[k],p=X(A);if(!["select","checkboxes","number","date"].includes(p)){_=!0;continue}const O=typeof g[y]=="number"?g[y]:1;w+=O;const v=b[y];let S=!1;if(p==="select"||p==="date"||p==="string")S=m.value===v;else if(p==="number"){const E=typeof l.tolerance=="number"?l.tolerance:0,q=typeof m.value=="number"?m.value:Number(m.value),x=typeof v=="number"?v:Number(v);S=isFinite(q)&&isFinite(x)&&Math.abs(q-x)<=E}else if(p==="checkboxes"){const E=new Set(Array.isArray(m.value)?m.value:[]),q=new Set(Array.isArray(v)?v:[]);E.size===q.size?S=[...E].every(x=>q.has(x)):S=!1}f+=S?O:0}const h=w>0?Math.round(f/w*100):null,P=_?"submitted":"graded",{data:F,error:I}=await i.from("submissions").update({grade:_?null:h,status:P,graded_at:_?null:new Date().toISOString(),feedback:_?"Needs manual review":"Automatically graded",updated_at:new Date().toISOString()}).eq("id",e).select().single();if(I)throw I;if(!_&&h!==null)try{await D.trackGradeAssigned(t.user_id,h),console.log("[GradingService] XP awarded for grade:",h)}catch(m){console.error("[GradingService] Error awarding XP:",m)}return!_&&h!==null&&(await i.from("feedback_history").insert([{id:G(),submission_id:e,user_id:"system",feedback:"Automatically graded",feedback_type:"automatic",created_at:new Date().toISOString()}]),await i.from("notifications").insert([{id:G(),user_id:t.user_id,type:"grade_posted",title:"Grade Posted",message:`Your submission has been automatically graded. Grade: ${h}%`,reference_id:e,is_read:!1,created_at:new Date().toISOString()}])),{...F,needs_review:_,total_points_earned:f,total_points_possible:w}}catch(t){throw console.error("Error auto-grading submission:",t),t}},C=async e=>{try{const{data:t,error:r}=await i.from("activities").select("id, title, due_date").eq("class_id",e);if(r)throw r;const a=await Promise.all(t.map(async s=>{const{data:l,error:b}=await i.from("submissions").select("id, status, grade, is_plagiarized, submitted_at").eq("activity_id",s.id);if(b)throw b;const g=l.filter(f=>f.status==="graded"),w=g.length>0?Math.round(g.reduce((f,_)=>f+(_.grade||0),0)/g.length):0;return{activity_id:s.id,title:s.title,due_date:s.due_date,total_submissions:l.length,graded_submissions:g.length,average_grade:w,plagiarism_count:l.filter(f=>f.is_plagiarized).length}})),n=a.flatMap(s=>Array(s.total_submissions).fill({graded:s.graded_submissions,average_grade:s.average_grade})),d=n.length,o=n.reduce((s,l)=>s+(l.graded||0),0),u=o>0?Math.round(n.reduce((s,l)=>s+(l.average_grade||0),0)/o):0;return{class_id:e,total_activities:t.length,total_submissions:d,submission_rate:t.length>0?Math.round(d/t.length*100):0,average_grade:u,activities:a}}catch(t){throw console.error("Error getting class grading stats:",t),t}},V=async e=>{try{const{data:t,error:r}=await i.from("class_members").select("class_id").eq("user_id",e).eq("role","teacher");if(r)throw r;if(!t.length)return[];const a=t.map(s=>s.class_id),{data:n,error:d}=await i.from("activity_class_assignments").select(`
        activity_id,
        class_id,
        activities (
          id,
          title
        ),
        classes (
          name
        )
      `).in("class_id",a);if(d)throw d;if(!n?.length)return[];const o=n.map(s=>({id:s.activities.id,title:s.activities.title,class_id:s.class_id,classes:{name:s.classes.name}})),u=[];for(const s of o){const{data:l,error:b}=await i.from("submissions").select(`
          id,
          student_id,
          status,
          submitted_at,
          profiles:student_id (
            id,
            full_name
          )
        `).eq("activity_id",s.id).in("status",["submitted","returned"]);if(b)throw b;l?.forEach(g=>{u.push({submission_id:g.id,activity_id:s.id,activity_title:s.title,class_id:s.class_id,class_name:s.classes?.name||"Unknown Class",user_id:g.student_id,user_name:g.profiles?.full_name||"Unknown User",submitted_at:g.submitted_at,status:g.status})})}return u}catch(t){throw console.error("Error getting submissions needing grading:",t),t}},H=async(e,t,r)=>{try{const{feedback:a,grade:n}=t,d={feedback:a,updated_at:new Date().toISOString()};typeof n<"u"&&(d.grade=n,d.graded_at=new Date().toISOString(),d.status="graded");const{data:o,error:u}=await i.from("submissions").update(d).eq("id",e).select().single();if(u)throw u;if(typeof n<"u"&&n!==null)try{await D.trackGradeAssigned(o.user_id,n),console.log("[GradingService] XP awarded for manual grade:",n)}catch(l){console.error("[GradingService] Error awarding XP:",l)}const{error:s}=await i.from("feedback_history").insert([{id:G(),submission_id:e,user_id:r,feedback:a,feedback_type:"manual",created_at:new Date().toISOString()}]);if(s)throw s;return await i.from("notifications").insert([{id:G(),user_id:o.user_id,type:"feedback_received",title:"Feedback Received",message:`You have received feedback on your submission. ${typeof n<"u"?`Grade: ${n}%`:""}`,reference_id:e,is_read:!1,created_at:new Date().toISOString()}]),o}catch(a){throw console.error("Error providing feedback:",a),a}},Y=async(e,t={})=>{try{let r=i.from("grading_queue").select("*").eq("teacher_id",e);if(t.classId){const{data:d}=await i.from("activities").select("id").eq("class_id",t.classId),o=d?.map(u=>u.id)||[];o.length>0&&(r=r.in("activity_id",o))}t.status&&(r=r.eq("status",t.status)),t.priority&&(r=r.eq("priority",t.priority));const{data:a,error:n}=await r.limit(50);if(n)throw n;return a||[]}catch(r){throw console.error("Error getting grading queue:",r),r}},K=async(e,t)=>{try{const{grade:r,feedback:a,rubricScores:n,latePenalty:d=0}=t,{data:o,error:u}=await i.from("submissions").update({grade:r-d,feedback:a,rubric_scores:n||{},late_penalty:d,status:"graded",graded_at:new Date().toISOString()}).eq("id",e).select("*, activity:activities(title), student:profiles!submissions_user_id_fkey(full_name)").single();if(u)throw u;if(r&&o.user_id)try{await D.trackGradeAssigned(o.user_id,r)}catch(s){console.error("Error awarding XP:",s)}return o}catch(r){throw console.error("Error grading submission:",r),r}},L=async e=>{const t=(await i.auth.getUser()).data.user,{data:r,error:a}=await i.from("grading_rubrics").insert([{...e,teacher_id:t.id}]).select().single();if(a)throw a;return r},Q=async(e={})=>{let t=i.from("grading_rubrics").select("*").eq("is_active",!0);e.activityId&&(t=t.eq("activity_id",e.activityId)),e.teacherId&&(t=t.eq("teacher_id",e.teacherId));const{data:r,error:a}=await t.order("created_at",{ascending:!1});if(a)throw a;return r||[]},B=async(e,t)=>{const{data:r,error:a}=await i.from("grading_rubrics").update(t).eq("id",e).select().single();if(a)throw a;return r},J=async e=>{const{error:t}=await i.from("grading_rubrics").delete().eq("id",e);if(t)throw t;return!0},W=async e=>{const t=(await i.auth.getUser()).data.user,{data:r,error:a}=await i.from("feedback_templates").insert([{...e,teacher_id:t.id}]).select().single();if(a)throw a;return r},Z=async(e={})=>{const t=(await i.auth.getUser()).data.user;let r=i.from("feedback_templates").select("*").eq("teacher_id",e.teacherId||t?.id);e.category&&(r=r.eq("category",e.category));const{data:a,error:n}=await r.order("usage_count",{ascending:!1});if(n)throw n;return a||[]},ee=async e=>{await i.rpc("increment_template_usage",{template_id:e});const{data:t,error:r}=await i.from("feedback_templates").select("*").eq("id",e).single();if(r)throw r;return t},te=async e=>{const{error:t}=await i.from("feedback_templates").delete().eq("id",e);if(t)throw t;return!0},re=async e=>{const{data:t,error:r}=await i.from("grade_history").select("*, changer:profiles!grade_history_changed_by_fkey(id, full_name)").eq("submission_id",e).order("changed_at",{ascending:!1});if(r)throw r;return t||[]},ne={autoGradeSubmission:z,getClassGradingStats:C,getSubmissionsNeedingGrading:V,provideFeedback:H,getGradingQueue:Y,gradeSubmission:K,createRubric:L,getRubrics:Q,updateRubric:B,deleteRubric:J,createFeedbackTemplate:W,getFeedbackTemplates:Z,useFeedbackTemplate:ee,deleteFeedbackTemplate:te,getGradeHistory:re};export{z as a,ne as g,G as v};
