import{s as i,b6 as _}from"./main-7VZoQpWp.js";const E={async getClasses({teacherId:e,studentId:r,activeOnly:a=!0}={}){let s=i.from("classes").select(`
        *,
        members:class_members(*, user:profiles(*)),
        meetings:meetings(*)
      `).order("name",{ascending:!0});e&&(s=s.eq("created_by",e)),a&&(s=s.eq("is_active",!0));const{data:t,error:n}=await s;if(n)throw console.error("Error fetching classes:",n),n;return r?t.filter(c=>c.members?.some(u=>u.user_id===r&&u.role==="student")):t},async getClassById(e){const{data:r,error:a}=await i.from("classes").select(`
        *,
        members:class_members(*, user:profiles(*)),
        meetings:meetings(*, 
          participants:meeting_participants(*, user:profiles(*))
        )
      `).eq("id",e).single();if(a)throw console.error(`Error fetching class ${e}:`,a),a;return r},async createClass(e,r=[]){const{name:a,description:s,teacher_id:t,subject:n,course:c,period:u,grade_level:f,academic_year:d,color:p,student_capacity:g,school_id:w,is_school_managed:b,grading_system:y}=e,{data:S,error:C}=await i.from("profiles").select("id").eq("id",t).maybeSingle();if(!S&&!C){console.log("Profile not found for teacher, creating one...");const{error:o}=await i.from("profiles").insert([{id:t,role:"teacher",created_at:new Date().toISOString(),updated_at:new Date().toISOString()}]);if(o&&(console.error("Error creating teacher profile:",o),o.code!=="23505"))throw new Error(`Erro ao criar perfil do professor: ${o.message}`)}const h={name:a,description:s||null,created_by:t,subject:n||null,course:c||null,period:u||null,grade_level:f||null,academic_year:(()=>{const o=parseInt(d,10);return Number.isFinite(o)?o:new Date().getFullYear()})(),grading_system:y||"0-10",color:p||"#6366f1",student_capacity:typeof g=="number"?g:30,room_number:e.room_number||null,is_online:!!e.is_online,meeting_link:e.meeting_link||null,chatbot_enabled:!!e.chatbot_enabled,school_id:w||null,is_school_managed:!!b,is_active:!0};console.log("Creating class with data:",h);const{data:m,error:l}=await i.from("classes").insert([h]).select().single();if(l)throw console.error("Error creating class:",l),console.error("Error details:",{code:l.code,message:l.message,details:l.details,hint:l.hint}),new Error(`Erro ao criar turma: ${l.message}. Detalhes: ${l.hint||l.details||"Nenhum detalhe adicional"}`);console.log("Class created successfully:",m);try{await _.send("classCreated",{userId:t,variables:{className:a},channelOverride:"push",metadata:{classId:m.id}})}catch(o){console.warn("Falha ao notificar criação de turma:",o)}try{const{error:o}=await i.from("class_members").insert([{class_id:m.id,user_id:t,role:"teacher",joined_at:new Date().toISOString()}]);o&&o.code!=="23505"&&console.warn("Erro ao adicionar professor como membro:",o)}catch(o){console.warn("Falha ao adicionar professor como membro da turma:",o)}if(r&&r.length>0)try{await this.addStudentsToClass(m.id,r)}catch(o){console.warn("Falha ao adicionar alunos:",o)}try{const{error:o}=await i.from("chatbot_configurations").upsert({class_id:m.id,enabled:!0,keywords:[],themes:[],scope_restrictions:[],created_at:new Date().toISOString(),updated_at:new Date().toISOString()},{onConflict:"class_id"});o?console.warn("Erro ao garantir configuração do chatbot:",o):console.log("Chatbot configuration ensured for class:",m.id)}catch(o){console.warn("Falha ao garantir chatbot para a turma:",o)}return this.getClassById(m.id)},async updateClass(e,r,a){const s={...r||{}};if(Object.prototype.hasOwnProperty.call(s,"academic_year")){const n=parseInt(s.academic_year,10);s.academic_year=Number.isFinite(n)?n:new Date().getFullYear()}const{error:t}=await i.from("classes").update({...s,updated_at:new Date().toISOString()}).eq("id",e);if(t)throw console.error(`Error updating class ${e}:`,t),t;if(Array.isArray(a)){const{data:n}=await i.from("class_members").select("user_id").eq("class_id",e).eq("role","student"),c=(n||[]).map(d=>d.user_id),u=a.filter(d=>!c.includes(d)),f=c.filter(d=>!a.includes(d));await Promise.all([this.addStudentsToClass(e,u),this.removeStudentsFromClass(e,f)])}return this.getClassById(e)},async deleteClass(e){const{error:r}=await i.from("classes").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",e);if(r)throw console.error(`Error deleting class ${e}:`,r),r;return!0},async addStudentsToClass(e,r){if(!r||r.length===0)return[];const{data:a,error:s}=await i.from("class_members").insert(r.map(t=>({class_id:e,user_id:t,role:"student",joined_at:new Date().toISOString()}))).select();if(s)throw console.error(`Error adding students to class ${e}:`,s),s;try{const[{data:t},{data:n}]=await Promise.all([i.from("classes").select("id, name, created_by").eq("id",e).single(),i.from("profiles").select("id, full_name").in("id",r)]);if(t?.created_by&&n?.length)for(const c of n)await _.send("studentAddedToClass",{userId:t.created_by,variables:{studentName:c.full_name||"Aluno",className:t.name||"Turma"},channelOverride:"push",metadata:{classId:e,studentId:c.id}})}catch(t){console.warn("Falha ao notificar alunos adicionados:",t)}return a},async removeStudentsFromClass(e,r){if(!r||r.length===0)return!0;const{error:a}=await i.from("class_members").delete().eq("class_id",e).in("user_id",r).eq("role","student");if(a)throw console.error(`Error removing students from class ${e}:`,a),a;try{const[{data:s},{data:t}]=await Promise.all([i.from("classes").select("id, name").eq("id",e).single(),i.from("profiles").select("id, full_name").in("id",r)]);for(const n of t||[])await _.send("studentRemovedFromClass",{userId:n.id,email:void 0,variables:{className:s?.name||"Turma"},metadata:{classId:e}})}catch(s){console.warn("Falha ao notificar alunos removidos:",s)}return!0},async searchClasses(e,{onlyActive:r=!0}={}){let a=i.from("classes").select("*").or(`name.ilike.%${e}%,description.ilike.%${e}%`);r&&(a=a.eq("is_active",!0));const{data:s,error:t}=await a;if(t)throw console.error("Error searching classes:",t),t;return s},async updateClassSchedule(e,r){const{data:a,error:s}=await i.from("classes").update({vacation_start:r.vacation_start||null,vacation_end:r.vacation_end||null,cancelled_dates:r.cancelled_dates||null,updated_at:new Date().toISOString()}).eq("id",e).select().single();if(s)throw console.error(`Error updating class schedule ${e}:`,s),s;return a},subscribeToClasses(e){const r=i.channel("classes_changes").on("postgres_changes",{event:"*",schema:"public",table:"classes"},a=>{e(a)}).subscribe();return()=>{i.removeChannel(r)}}};export{E as C};
