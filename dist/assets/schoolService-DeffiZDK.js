import{s}from"./main-7VZoQpWp.js";class p{async getDashboardStats(r){try{const{data:t,error:e}=await s.from("school_teachers").select("user_id, status").eq("school_id",r).eq("status","active");if(e)throw e;const a=t?.map(h=>h.user_id)||[],{data:u,error:i}=await s.from("school_classes").select("class_id").eq("school_id",r);if(i)throw i;const o=u?.map(h=>h.class_id)||[];let m={};if(o.length>0){const{data:h,error:_}=await s.from("classes").select("id, name, created_by, subject").in("id",o);if(_)throw _;m=(h||[]).reduce((d,g)=>(d[g.id]=g,d),{})}let c=0;if(r){const{data:h,error:_}=await s.rpc("count_school_students",{p_school_id:r});if(_){console.warn("[SchoolService] Error counting students, using fallback:",_);const{count:d}=await s.from("class_members").select("user_id",{count:"exact",head:!0}).in("class_id",o).eq("role","student");c=d||0}else c=h||0}const n=new Date;n.setDate(n.getDate()-30);let l={total:0,onTime:0,late:0};if(o.length>0){const{data:h}=await s.from("activity_class_assignments").select("activity_id, activities (id, due_date)").in("class_id",o),_=h?.map(d=>d.activity_id)||[];if(_.length>0){const{data:d}=await s.from("submissions").select("id, submitted_at, activity_id").in("activity_id",_).eq("status","submitted").gte("submitted_at",n.toISOString());l.total=d?.length||0;const g=new Map(h?.map(f=>[f.activity_id,f.activities?.due_date])||[]);d?.forEach(f=>{const y=g.get(f.activity_id);if(y){const S=new Date(f.submitted_at),b=new Date(y);S<=b?l.onTime++:l.late++}})}}const w=l.total>0?Math.round(l.onTime/l.total*100):0;let v=null;if(o.length>0){const{data:h}=await s.from("activity_class_assignments").select("activity_id").in("class_id",o),_=h?.map(d=>d.activity_id)||[];if(_.length>0){const{data:d}=await s.from("submissions").select("grade").in("activity_id",_).not("grade","is",null);d&&d.length>0&&(v=(d.reduce((f,y)=>f+(y.grade||0),0)/d.length).toFixed(1))}}return{totalTeachers:a.length,totalStudents:c,totalClasses:o.length,onTimeRate:w,averageGrade:v,submissionsLast30Days:l.total,classIds:o,teacherIds:a}}catch(t){throw console.error("[SchoolService] Error getting dashboard stats:",t),t}}async getTeachers(r){try{const{data:t,error:e}=await s.from("school_teachers").select("user_id, status, joined_at").eq("school_id",r).order("joined_at",{ascending:!1});if(e)throw e;const a=(t||[]).map(i=>i.user_id);let u={};if(a.length>0){const{data:i}=await s.from("profiles").select("id, full_name, email, avatar_url").in("id",a);u=(i||[]).reduce((o,m)=>(o[m.id]=m,o),{})}return(t||[]).map(i=>{const o=u[i.user_id]||{};return{id:i.user_id,name:o.full_name||"Professor",email:o.email||"",avatar:o.avatar_url,status:i.status,joinedAt:i.joined_at}})}catch(t){throw console.error("[SchoolService] Error getting teachers:",t),t}}async getClasses(r){try{const{data:t,error:e}=await s.from("school_classes").select("class_id, created_at").eq("school_id",r).order("created_at",{ascending:!1});if(e)throw e;const a=(t||[]).map(c=>c.class_id);let u={};if(a.length>0){const{data:c}=await s.from("classes").select("id, name, subject, color, created_by").in("id",a);u=(c||[]).reduce((n,l)=>(n[l.id]=l,n),{})}const i=Array.from(new Set(Object.values(u).map(c=>c.created_by).filter(Boolean)));let o={};if(i.length>0){const{data:c}=await s.from("profiles").select("id, full_name").in("id",i);o=(c||[]).reduce((n,l)=>(n[l.id]=l.full_name||"Professor",n),{})}let m={};if(a.length>0){const{data:c,error:n}=await s.rpc("count_class_students_batch",{p_class_ids:a});n?console.warn("[SchoolService] Error counting students batch, using 0:",n):m=(c||[]).reduce((l,w)=>(l[w.class_id]=w.student_count,l),{})}return(t||[]).map(c=>{const n=u[c.class_id]||{};return{id:c.class_id,name:n.name||"Turma",subject:n.subject,color:n.color,teacherName:o[n.created_by]||"Professor",studentCount:m[c.class_id]||0,linkedAt:c.created_at}})}catch(t){throw console.error("[SchoolService] Error getting classes:",t),t}}async linkTeacher(r,t){try{const{data:e,error:a}=await s.from("profiles").select("id, user_metadata->role").eq("email",t).maybeSingle();if(a)throw a;if(!e)throw new Error("Professor não encontrado com este email");const{data:u}=await s.from("school_teachers").select("user_id").eq("school_id",r).eq("user_id",e.id).maybeSingle();if(u)throw new Error("Professor já está vinculado a esta escola");const{error:i}=await s.from("school_teachers").insert({school_id:r,user_id:e.id,status:"active"});if(i)throw i;return{success:!0,teacherId:e.id}}catch(e){throw console.error("[SchoolService] Error linking teacher:",e),e}}async unlinkTeacher(r,t){try{const{error:e}=await s.from("school_teachers").delete().eq("school_id",r).eq("user_id",t);if(e)throw e;return{success:!0}}catch(e){throw console.error("[SchoolService] Error unlinking teacher:",e),e}}async linkClass(r,t){try{const{data:e,error:a}=await s.from("classes").select("id, created_by").eq("id",t).single();if(a)throw a;if(!e)throw new Error("Turma não encontrada");const{data:u}=await s.from("school_teachers").select("user_id").eq("school_id",r).eq("user_id",e.created_by).maybeSingle();if(!u)throw new Error("O professor desta turma não está vinculado à escola");const{data:i}=await s.from("school_classes").select("class_id").eq("school_id",r).eq("class_id",t).maybeSingle();if(i)throw new Error("Turma já está vinculada a esta escola");const{error:o}=await s.from("school_classes").insert({school_id:r,class_id:t});if(o)throw o;return{success:!0}}catch(e){throw console.error("[SchoolService] Error linking class:",e),e}}async unlinkClass(r,t){try{const{error:e}=await s.from("school_classes").delete().eq("school_id",r).eq("class_id",t);if(e)throw e;return{success:!0}}catch(e){throw console.error("[SchoolService] Error unlinking class:",e),e}}async getUserSchool(r){try{const{data:t,error:e}=await s.from("schools").select("id, name, logo_url, settings").eq("id",r).single();if(e){const{data:a,error:u}=await s.from("schools").select("id, name, logo_url, settings").eq("owner_id",r).limit(1).single();return u||!a?(console.error("[SchoolService] School not found for user:",r),null):{id:a.id,name:a.name,logo:a.logo_url,settings:a.settings,adminRole:"owner"}}return{id:t.id,name:t.name,logo:t.logo_url,settings:t.settings,adminRole:"owner"}}catch(t){return console.error("[SchoolService] Error getting user school:",t),null}}}const D=new p;export{D as s};
